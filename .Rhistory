library(lubridate)
library(ggsurvfit)
library(gtsummary)
library(tidycmprsk)
library(dplyr)
library(rms)
library(stringi)
library(survivalAnalysis)
library(purrr)
library(googlesheets4)
library(xddd)
library(ggpubr)
library(DataExplorer)
library(xlsx)
library(swimplot)
remove(list=ls())
main <- read.csv2("IMGEMI_CRF_1 - Main.csv", sep=',', header = FALSE)
colnames(main) <- main[2,]
main <- main[3:nrow(main),]
main <- main %>% filter(eligible=='Yes')
main <- main %>% mutate(pfs_months = as.durtion())
list.files("C:\Users\pbpol\OneDrive\Dokumenty\NIO\robocze\Zani\ZANI\clinical_database")
list.files("C:\Users\pbpol\OneDrive\Dokumenty\NIO\robocze\Zani\ZANI\clinical_database")
list.files("C:/Users/pbpol/OneDrive/Dokumenty/NIO/robocze/Zani/ZANI/clinical_database")
ls("C:/Users/pbpol/OneDrive/Dokumenty/NIO/robocze/Zani/ZANI/clinical_database")
getwd
getwd()
setwd("C:/Users/pbpol/OneDrive/Dokumenty/NIO/robocze/Zani/ZANI/clinical_database")
getwd()
list.files
list.files()
files
files <- list.files()
files
files[files=='legend']
files[3]
files=='legend'
files[files=='legend.txt']
files[files=='legend.txt'] <- NULL
files[-files=='legend.txt']
files[-(files=='legend.txt')]
library(openxlsx)
rea.xlsx(files, sheetIndex=1))
rea.xlsx(files, sheetIndex=1)
read.xlsx(files, sheetIndex=1)
read.xlsx(files, sheet = 1)
read.xlsx(xlsxFile = files, sheet = 1)
library(purr)
library(purrr)
map(files, read.xlsx, sheet=1)
files
files[-(files=='legend.txt')]
files <- files[-(files=='legend.txt')]
map(files, read.xlsx, sheet=1)
files
source("~/.active-rstudio-document", echo=TRUE)
files
files <- list.files()
files
setwd('C:/Users/pbpol/OneDrive/Dokumenty/NIO/robocze/Zani/ZANI/clinical_database')
files <- list.files()
files
files[files=='legend.txt']
'iles=='legend.txt'
'files=='legend.txt'
files=='legend.txt'
files <- files[-which(files=='legend.txt')]
files
map(files, read.xlsx, sheet=1)
x <- map(files, read.xlsx, sheet=1)
class(x)
read.xlsx('IMGEMI_CRF_1.xlsx', sheet = main)
read.xlsx('IMGEMI_CRF_1.xlsx', sheet = 'main')
read.xlsx('IMGEMI_CRF_1.xlsx', sheet = 'Main')
read.xlsx('IMGEMI_CRF_1.xlsx', sheet = 'Main1')
?read.xlsx
getSheetNames('IMGEMI_CRF_1.xlsx')
sheet_names <- getSheetNames('IMGEMI_CRF_1.xlsx')
source("~/.active-rstudio-document", echo=TRUE)
sheet_names <- sheet_names[-which(sheet_names=='molecular_log')]
sheet_names
source("~/.active-rstudio-document", echo=TRUE)
sheets
class(sheets)
names(sheets)
length(sheets)
frame <- data.frame(a=c(1,2), b=c(2,3))
frame
frame[-2,]
frame[-1,]
source("~/.active-rstudio-document", echo=TRUE)
>map
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
sheets[1]
sheets[11]
frame[c(-1,-2),]
frame <- data.frame(a=c(1,2,4,3,2), b=c(2,3,3,4,5))
frame[c(-1,-2),]
source("~/.active-rstudio-document", echo=TRUE)
sheets[11]
lapply(sheets, rbind)
rbind(list(frame, frame))
library(dplyr)
rbind(list(frame, frame)) %>% class
?do.call
do.call(rbind, list(frame, frame))
sheets <- lapply(sheets, do.call, what=rbind)
sheets <- lapply(sheets, do.call, what=colnames)
sheets <- lapply(sheets, do.call, what=ncol)
sheets[1][1]
ncol(sheets[1][1])
sheets[[1]]
sheets[[1]][1]
sheets[[1]][1] %>% ncol
sheets[[1]][1] %>% x
x <- sheets[[1]][1]
x
is.data.frame(x)
class(x)
x <- sheets[[1]][[1]]
class(x)
x <- sheets[1][[1]]
class(x)
sheets[[1]][[1]] %>% ncol
do,call(ncol, list(frame, frame))
do.call(ncol, list(frame, frame))
do.call(function(list){map(list, ncol)}, list(frame, frame))
?sapply
sheets <- lapply(sheets, sapply, FUN=ncol)
sapply(sheets[1], sapply)
sapply(sheets[1], sapply, ncol)
lapply(sheets[1], sapply, ncol)
lapply(sheets, sapply, ncol)
sheets <- lapply(sheets, sapply, ncol)
sheets
sheets <- lapply(sheets, sapply, colnames)
sheets
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
lapply(sheets, sapply, colnames)
?intersect
lapply(sheets, function(para) {
setdiff(union(para[[1]], para[[2]]), intersect(para[[1]], para[[2]]))
})
lapply(sheets, lapply, colnames)
sheet_colnames <- lapply(sheets, lapply, colnames)
lapply(sheet_colnames, function(para) {
setdiff(union(para[[1]], para[[2]]), intersect(para[[1]], para[[2]]))
})
sheet_names[10]
source("~/.active-rstudio-document", echo=TRUE)
lapply(sheet_colnames, function(para) {
setdiff(union(para[[1]], para[[2]]), intersect(para[[1]], para[[2]]))
})
source("~/.active-rstudio-document", echo=TRUE)
db
?map
source("~/.active-rstudio-document", echo=TRUE)
db
source("~/.active-rstudio-document", echo=TRUE)
db$Main$subject_id
db$Main$subject_id %>% typeof()
?read.xlsx
source("~/.active-rstudio-document", echo=TRUE)
get_data <- function(id, log, column){
frame <- db[log]
frame[id, column]
}
get_data[807773, 'Main', 'birth']
get_data(807773, 'Main', 'birth')
frame[frame$subject_id==id, column]
source("~/.active-rstudio-document", echo=TRUE)
get_data(807773, 'Main', 'birth')
frame <- db['Main']
frame
frame %>% class
source("~/.active-rstudio-document", echo=TRUE)
get_data(807773, 'Main', 'birth')
library(rlang)
source("~/.active-rstudio-document", echo=TRUE)
get_data(807773, 'Main', 'birth')
get_data(807773, Main, birth)
library(rlang)
my_fun <- function(color) {
color_sym <- ensym(color)
color_str <- as_string(color_sym)
cat("Wybrałeś kolor:", color_str, "\n")
}
my_fun(blue)
my_fun(ajja)
get_data <- function(id, log, column){
log_sym <- ensym(log)
log_str <- as_string(log)
column_sym <- ensym(column)
column_str <- as_string(column_sym)
frame <- db[[log]]
frame[frame$subject_id==id, column]
}
get_data(807773, Main, birth)
get_data <- function(id, log, column){
log_str <- as_string(ensym(log))
column_str <- as_string(ensym(column))
frame <- db[[log_str]]
frame[frame$subject_id==id, column_str]
}
get_data(807773, Main, birth)
get_data(1459910, lesion_log, site)
source("~/.active-rstudio-document", echo=TRUE)
get_data(1459910, lesion_log)
get_log <- function(id, log){
log_str <- as_string(ensym(log))
db[[log_str]]
}
get_data(1459910, lesion_log)
get_log <- function(id, log){
log_str <- as_string(ensym(log))
frame <- db[[log_str]]
frame
}
get_data(1459910, lesion_log)
get_log <- function(id, log_name){
log_name_str <- as_string(ensym(log_name))
frame <- db[[log_name_str]]
frame
}
get_data(1459910, lesion_log)
get_log <- function(id, log_name){
log_name_str <- as_string(ensym(log_name))
frame <- db[[log_name_str]]
log_name_str
}
get_data(1459910, lesion_log)
as_string(ensym(log_name))
get_log(1459910, lesion_log)
get_log <- function(id, log_name){
log_name_str <- as_stringlog(ensym(log_name))
db[[log_name_str]][id,]
}
get_log(1459910, lesion_log)
get_log <- function(id, log_name){
log_name_str <- as_stringl(ensym(log_name))
db[[log_name_str]][id,]
}
get_log(1459910, lesion_log)
get_log <- function(id, log_name){
log_name_str <- as_string(ensym(log_name))
db[[log_name_str]][id,]
}
get_log(1459910, lesion_log)
get_log <- function(id, log_name){
log_name_str <- as_string(ensym(log_name))
frame <- db[[log_name_str]]
frame[frame$subject_id==id,]
}
get_log(1459910, lesion_log)
map(unique(db$Main$subject_id), get_log, log_name=Follow-up_log)
map(unique(db$Main$subject_id), get_log, log_name='Follow-up_log')
get_log(1459910, "Follow-up_log")
get_log(1459910, 'Follow-up_log')
subject_list <- unique(db$Main$subject_id)
map(subject_list, get_log, log_name='Follow-up_log')
map(subject_list, ~ get_log(., log_name='Follow-up_log'))
get_log(1459910, 'Follow-up_log')
get_log(subject_list, 'Follow-up_log')
map(subject_list, ~ get_log(id = ., log_name='Follow-up_log'))
map(subject_list, ~ get_log(id = ., log_name=lesion_log))
map(subject_list, ~ get_log(id = ., log_name='lesion_log'))
map(subject_list, ~ get_log(id = ., log_name='Follow-up_log'))
fup <-map(subject_list, ~ get_log(id = ., log_name='Follow-up_log'))
fup[[124]]
length(1112)
get_log <- function(id, log_name){
log_name_str <- as_string(ensym(log_name))
frame <- db[[log_name_str]]
frame[frame$subject_id%in%id,]
}
get_log(c(1459910, 1475172), lesion_log)
get_log(c(1459910, 1475172), lesion_log) %>% norw
get_log(c(1459910, 1475172), lesion_log) %>% nrow
get_log(c(1459910), lesion_log) %>% nrow
get_log(c(1475172), lesion_log) %>% nrow
subject_list=c()
length(subject_list)
source("~/.active-rstudio-document", echo=TRUE)
get_missing('Follow-up_log')
get_missing(subject_list=subject_list,'Follow-up_log')
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
out
frame
frame$subject_id
subj_list
setdiff(frame$subject_id, subj_list)
source("~/.active-rstudio-document", echo=TRUE)
ouy
out
source("~/.active-rstudio-document", echo=TRUE)
out
subj_list
source("~/.active-rstudio-document", echo=TRUE)
get_missing('Follow-up_log')
source("~/.active-rstudio-document", echo=TRUE)
get_missing('Follow-up_log')
get_missing(log_name = 'Follow-up_log')
source("~/.active-rstudio-document", echo=TRUE)
get_missing(log_name = 'Follow-up_log')
mylist <- c(1459910,1475172)
get_missing(log_name = 'Follow-up_log', subj_list = mylist)
mylist <- c(1459910,14751726969)
get_missing(log_name = 'Follow-up_log', subj_list = mylist)
eligible_subjects <- db[db$Main$eligible=='Yes', 'subject_id']
eligible_subjects <- db$Main[db$Main$eligible=='Yes', 'subject_id']
eligible_subjects
eligible_subjects <- na.omit(db$Main[db$Main$eligible=='Yes', 'subject_id'])
eligible_subjects
db <- lapply(db,
function(frame){frame <- frame[frame$subject_id%in%eligible_subjects]})
db <- lapply(db,
function(frame){frame <- frame[frame$subject_id%in%eligible_subjects,]})
db$Main
db$Main %>% nrow
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
get_missing('Follow-up_log')
260*60
48*260
48*260*4,3
48*260*4.33
options(java.parameters = "-Xmx1000m")
library(knitr)
library(survival)
library(lubridate)
library(ggsurvfit)
library(gtsummary)
library(tidycmprsk)
library(dplyr)
library(rms)
library(stringi)
library(survivalAnalysis)
library(purrr)
library(googlesheets4)
library(xddd)
library(ggpubr)
library(DataExplorer)
library(xlsx)
remove(list=ls())
qubit_log <- read.xlsx("C:/Users/pbpol/OneDrive/Dokumenty/NIO/robocze/Zani/ZANI/lab/lab_report.xlsx", sheetName = 'quantity')
# nanodrop_log <- read.xlsx()
qubit_dna <- qubit_log %>% filter(material == 'DNA')
qubit_dna <- qubit_log %>% filter(material == 'RNA')
remove(list=ls())
qty <- read.xlsx("C:/Users/pbpol/OneDrive/Dokumenty/NIO/robocze/Zani/ZANI/lab/lab_report.xlsx", sheetName = 'quantity')
# nanodrop_log <- read.xlsx()
qty_dna <- qty  %>% filter(material == 'DNA')
qty_rna <- qty %>% filter(material == 'RNA')
qty_rna$qty..ng.
remove(list=ls())
qty <- read.xlsx("C:/Users/pbpol/OneDrive/Dokumenty/NIO/robocze/Zani/ZANI/lab/lab_report.xlsx", sheetName = 'quantity')
# nanodrop_log <- read.xlsx()
qty_dna <- qty  %>% filter(material == 'DNA')
qty_rna <- qty %>% filter(material == 'RNA')
qty$qty
remove(list=ls())
qty <- read.xlsx("C:/Users/pbpol/OneDrive/Dokumenty/NIO/robocze/Zani/ZANI/lab/lab_report.xlsx", sheetName = 'quantity')
# nanodrop_log <- read.xlsx()
qty_dna <- qty  %>% filter(material == 'DNA')
qty_rna <- qty %>% filter(material == 'RNA')
nrow(qty)
any(duplicated(qty$sample_id))
options(java.parameters = "-Xmx1000m")
library(knitr)
library(survival)
library(lubridate)
library(ggsurvfit)
library(gtsummary)
library(tidycmprsk)
library(dplyr)
library(rms)
library(stringi)
library(survivalAnalysis)
library(purrr)
library(googlesheets4)
library(xddd)
library(ggpubr)
library(DataExplorer)
library(xlsx)
remove(list=ls())
qty <- read.xlsx("C:/Users/pbpol/OneDrive/Dokumenty/NIO/robocze/Zani/ZANI/lab/lab_report.xlsx", sheetName = 'quantity')
# nanodrop_log <- read.xlsx()
qty <- qty %>% mutate(
master_sample_id <- stri_extract_all_regex(sample_id, 'Z_\\d{1,2}_\\w')
)
qty_dna <- qty  %>% filter(material == 'DNA')
qty_rna <- qty %>% filter(material == 'RNA')
options(java.parameters = "-Xmx1000m")
library(knitr)
library(survival)
library(lubridate)
library(ggsurvfit)
library(gtsummary)
library(tidycmprsk)
library(dplyr)
library(rms)
library(stringi)
library(survivalAnalysis)
library(purrr)
library(googlesheets4)
library(xddd)
library(ggpubr)
library(DataExplorer)
library(xlsx)
remove(list=ls())
qty <- read.xlsx("C:/Users/pbpol/OneDrive/Dokumenty/NIO/robocze/Zani/ZANI/lab/lab_report.xlsx", sheetName = 'quantity')
# nanodrop_log <- read.xlsx()
qty <- qty %>% mutate(
master_sample_id = stri_extract_all_regex(sample_id, 'Z_\\d{1,2}_\\w')
)
qty_dna <- qty  %>% filter(material == 'DNA')
qty_rna <- qty %>% filter(material == 'RNA')
qty$master_sample_id
options(java.parameters = "-Xmx1000m")
library(knitr)
library(survival)
library(lubridate)
library(ggsurvfit)
library(gtsummary)
library(tidycmprsk)
library(dplyr)
library(rms)
library(stringi)
library(survivalAnalysis)
library(purrr)
library(googlesheets4)
library(xddd)
library(ggpubr)
library(DataExplorer)
library(xlsx)
remove(list=ls())
qty <- read.xlsx("C:/Users/pbpol/OneDrive/Dokumenty/NIO/robocze/Zani/ZANI/lab/lab_report.xlsx", sheetName = 'quantity')
# nanodrop_log <- read.xlsx()
qty <- qty %>% mutate(
master_sample_id = stri_extract_all_regex(sample_id, 'Z_\\d{1,2}_\\w', simplify = TRUE)
)
qty_dna <- qty  %>% filter(material == 'DNA')
qty_rna <- qty %>% filter(material == 'RNA')
View(qty)
options(java.parameters = "-Xmx1000m")
library(knitr)
library(survival)
library(lubridate)
library(ggsurvfit)
library(gtsummary)
library(tidycmprsk)
library(dplyr)
library(rms)
library(stringi)
library(survivalAnalysis)
library(purrr)
library(googlesheets4)
library(xddd)
library(ggpubr)
library(DataExplorer)
library(xlsx)
remove(list=ls())
qty <- read.xlsx("C:/Users/pbpol/OneDrive/Dokumenty/NIO/robocze/Zani/ZANI/lab/lab_report.xlsx", sheetName = 'quantity')
# nanodrop_log <- read.xlsx()
qty <- qty %>% mutate(
master_sample_id = stri_extract_all_regex(sample_id, 'Z_\\d{1,2}_\\w', simplify = TRUE)[,1]
)
qty_dna <- qty  %>% filter(material == 'DNA')
qty_rna <- qty %>% filter(material == 'RNA')
View(qty)
plot(qty_dna$qty, qty_rna$qty)
plot(qty_dna$qty, qty_rna$qty)
plot(qty_dna$qty, qty_rna$qty, log = TRUE)
?plot
plot(qty_dna$qty, qty_rna$qty, log = 'xy')
plot(qty_dna$qty, qty_rna$qty, log = 'xy')
plot(qty_dna$qty, qty_rna$qty, log = 'xy', xlab = 'DNA [ng]', ylab = 'RNA [ng]')
plot(qty_dna$qty, qty_rna$qty, log = 'xy', xlab = 'DNA [ng]', ylab = 'RNA [ng]')
options(java.parameters = "-Xmx1000m")
library(knitr)
library(survival)
library(lubridate)
library(ggsurvfit)
library(gtsummary)
library(tidycmprsk)
library(dplyr)
library(rms)
library(stringi)
library(survivalAnalysis)
library(purrr)
library(googlesheets4)
library(xddd)
library(ggpubr)
library(DataExplorer)
library(xlsx)
remove(list=ls())
qty <- read.xlsx("C:/Users/pbpol/OneDrive/Dokumenty/NIO/robocze/Zani/ZANI/lab/lab_report.xlsx", sheetName = 'quantity')
# nanodrop_log <- read.xlsx()
qty <- qty %>% mutate(
master_sample_id = stri_extract_all_regex(sample_id, 'Z_\\d{1,2}_\\w', simplify = TRUE)[,1]
)
qty_dna <- qty  %>% filter(material == 'DNA')
qty_rna <- qty %>% filter(material == 'RNA')
qty_tumor <- qty %>% filter(tissue == 'tumor')
qty_control <- qty %>% filter(tissue == 'control')
plot(qty_dna$qty, qty_rna$qty, log = 'xy', xlab = 'DNA [ng]', ylab = 'RNA [ng]')
qty <- merge(qty_rna, qty_rna, by = 'master_sample_id',all = TRUE)
View(qty)
